plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'signing'
    id("io.github.juuxel.loom-quiltflower") version "1.6.0"
    id 'org.quiltmc.quilt-mappings-on-loom' version '3.1.1'
}

archivesBaseName = mod_id
version = "$mod_version+$minecraft_version"
group = project.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')

    testmodImplementation sourceSets.main.output
}

test { useJUnitPlatform() }

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}
jar { from "LICENSE" }

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
}

Properties properties = new Properties()
properties.put("total_version", version)

task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out variables like \$project.version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand(properties)
    }
    destinationDir = rootDir
}
publish.dependsOn updateTemplate